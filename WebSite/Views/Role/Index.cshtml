
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>角色管理</title>
     @Html.Partial("~/Views/Shared/_Head.cshtml")
</head>
<body>
    <div id="App" ref="App" v-loading="Loading.bodyLoading">
        <template>
            <div ref="QueryFormDiv">
                <el-form :model="QueryFormData" :inline="true" class="Query_Form" ref="QueryForm" @@submit.native.prevent>
                    <el-form-item label="角色名称" prop="RoleName">
                        <el-input v-model="QueryFormData.RoleName" placeholder="请输入角色名称"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @@click="onQuery" icon="el-icon-search">查询</el-button>
                        <el-button type="primary" @@click="resetQueryForm" icon="el-icon-refresh">重置</el-button>
                    </el-form-item>
                </el-form>
                <el-row class="Table_Button_Row">
                    <el-col :span="24">
                        <el-button icon="icon iconfont icon-file-add" type="primary" v-if="ActionPermission.Add" ref="btnAdd" @@click="openAddDialog">新增</el-button>
                        <el-button icon="icon iconfont icon-edit" type="primary" v-if="ActionPermission.Edit" :disabled="ButtonState.btnEdit" ref="btnEdit" @@click="openEditDialog">编辑</el-button>
                        <el-button icon="icon iconfont icon-delete" type="danger" v-if="ActionPermission.Delete" :disabled="ButtonState.btnDelete" ref="btnDelete" @@click="deleteClick">删除</el-button>
                    </el-col>
                </el-row>
            </div>
            <el-table ref="dataTable"
                      :data="tableData"
                      :border="true"
                      :height="tableHeight"
                      @@selection-change="selectChange"
                      @@row-click="rowClick"
                      style="width: 100%;margin-top:20px;"
                      element-loading-text="拼命加载中"
                      element-loading-spinner="el-icon-loading"
                      element-loading-background="rgba(200, 200,200, 0.5)"
                      v-loading="Loading.tableLoading">
                <el-table-column type="index"
                                 :index="showIdex"
                                 label=" ">
                </el-table-column>
                <el-table-column type="selection"
                                 width="50">
                </el-table-column>
                <el-table-column prop="RoleName"
                                 label="角色名称"
                                 width="180">
                </el-table-column>
                <el-table-column prop="RoleDesc"
                                 label="角色描述"
                                 width="300">
                </el-table-column>
                <el-table-column prop="IsEnabled"
                                 label="是否启用"
                                 width="100">
                    <template slot-scope="scope">
                        {{ scope.row.IsEnabled?"是":"否" }}
                    </template>
                </el-table-column>
                <el-table-column prop="Sort"
                                 label="排序"
                                 width="80">
                </el-table-column>
            </el-table>
            <div ref="Pagination">
                <el-pagination @@size-change="handleSizeChange"
                               @@current-change="handleCurrentChange"
                               :current-page.sync="QueryFormData.Page"
                               :page-size.sync="QueryFormData.PageSize"
                               :page-sizes="PaginationData.pageSizes"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="PaginationData.total"
                               style="width:100%;padding-left:20px;box-sizing:border-box">
                </el-pagination>
            </div>
            <el-dialog :close-on-click-modal="false" title="新增"
                       :visible.sync="Dialog.addDialog"
                       width="500px">
                <el-form :model="AddFormData" :rules="AddFormRule" label-width="80px" ref="AddForm" @@submit.native.prevent>
                    <el-form-item label="角色名称" prop="RoleName">
                        <el-input v-model="AddFormData.RoleName" placeholder="请输入角色名称"></el-input>
                    </el-form-item>
                    <el-form-item label="角色描述" prop="RoleDesc">
                        <el-input v-model="AddFormData.RoleDesc" placeholder="请输入角色描述"></el-input>
                    </el-form-item>
                    <el-form-item label="是否启用" prop="IsEnabled">
                        <el-switch v-model="AddFormData.IsEnabled"
                                   active-color="#13ce66"
                                   inactive-color="#ff4949">
                        </el-switch>
                    </el-form-item>
                    <el-form-item label="排序" prop="Sort">
                        <el-input-number v-model="AddFormData.Sort"></el-input-number>
                    </el-form-item>
                </el-form>
                <span slot="footer" class="dialog-footer">
                    <el-button type="primary" @@click="submitAddForm">保 存</el-button>
                    <el-button @@click="cancelAddForm">取 消</el-button>
                </span>
            </el-dialog>
            <el-dialog :close-on-click-modal="false" title="编辑"
                       :visible.sync="Dialog.editDialog"
                       width="500px">
                <el-form :model="EditFormData" :rules="EditFormRule" label-width="80px" ref="EditForm" @@submit.native.prevent>
                    <el-form-item label="用户名" prop="RoleName">
                        <el-input v-model="EditFormData.RoleName" placeholder="请输入角色名称"></el-input>
                    </el-form-item>
                    <el-form-item label="姓名" prop="RoleDesc">
                        <el-input v-model="EditFormData.RoleDesc" placeholder="请输入角色描述"></el-input>
                    </el-form-item>
                    <el-form-item label="是否启用" prop="IsEnabled">
                        <el-switch v-model="EditFormData.IsEnabled"
                                   active-color="#13ce66"
                                   inactive-color="#ff4949">
                        </el-switch>
                    </el-form-item>
                    <el-form-item label="排序" prop="Sort">
                        <el-input-number v-model="EditFormData.Sort"></el-input-number>
                    </el-form-item>
                </el-form>
                <span slot="footer" class="dialog-footer">
                    <el-button type="primary" @@click="submitEditForm">保 存</el-button>
                    <el-button @@click="cancelEditForm">取 消</el-button>
                </span>
            </el-dialog>
        </template>
    </div>
</body>
</html>
<script>
    $vue = new Vue({
        el: "#App",
        data: {
            QueryFormData: {
                RoleName: "",
                Page: 1,
                PageSize: 10,
            },
            tableData: [],
            tableHeight: 500,
            ButtonState: {
                btnEdit: true,
                btnDelete: true
            },
            Dialog: {
                addDialog: false,
                editDialog: false
            },
            AddFormData: {
                RoleName: "",
                RoleDesc: "",
                IsEnabled: true,
                Sort: 0
            },
            AddFormRule: {
                RoleName: [
                    { required: true, message: '请输入角色名称', trigger: 'change' },
                    { max: 25, message: '长度不能超过25个字符', trigger: 'change' }
                ],
                RoleDesc: [
                    { max: 25, message: '长度不能超过50个字符', trigger: 'change' }
                ]
            },
            EditFormData: {
                Id:"",
                RoleName: "",
                RoleDesc: "",
                IsEnabled: true,
                Sort: 0
            },
            EditFormRule: {
                RoleName: [
                    { required: true, message: '请输入角色名称', trigger: 'change' },
                    { max: 25, message: '长度不能超过25个字符', trigger: 'change' }
                ],
                RoleDesc: [
                    { max: 25, message: '长度不能超过50个字符', trigger: 'change' }
                ]
            },
            SelectOption: {
            },
            Loading: {
                bodyLoading: false,
                tableLoading: false
            },
            PaginationData: {
                pageSizes: [10, 20, 50, 100],
                total: 0
            },
            PaginationFilter: {
            },
            ActionPermission: {
                Add: false,
                Delete: false,
                Edit: false
            }
        },
        methods: {
            onQuery: function () {
                this.QueryFormData.Page = 1;
                this.PaginationFilter = JSON.parse(JSON.stringify(this.QueryFormData));
                getList();
            },
            showIdex: function (index) {
                return (this.QueryFormData.Page - 1) * this.QueryFormData.PageSize + 1 + index;
            },
            resetQueryForm: function () {
                this.$refs.QueryForm.resetFields();
            },
            openAddDialog: function () {
                this.Dialog.addDialog = true;
                this.$refs.AddForm.resetFields();
            },
            openEditDialog: function () {
                axios.post("GetRole", { roleId: this.$refs.dataTable.selection[0].Id }).then(function (response) {
                    $vue.EditFormData = response.data;
                    $vue.Dialog.editDialog = true;
                });
            },
            submitAddForm: function () {
                this.$refs.AddForm.validate(function (success, validateobj) {
                    if (success) {
                        $vue.Loading.bodyLoading = true;
                        axios.post("AddRole", $vue.AddFormData).then(function (response) {
                            $vue.Loading.bodyLoading = false;
                            if (response.data.success) {
                                $vue.$message({
                                    type: 'success',
                                    message: '新增成功'
                                });
                                getList();
                            }
                            else {
                                $vue.$message({
                                    type: 'success',
                                    message: '新增失败'
                                });
                            }
                            $vue.Dialog.addDialog = false;

                        }).catch(function (error) {
                            $vue.Loading.bodyLoading = false;
                            $vue.$message({
                                type: 'error',
                                message: '服务器异常'
                            });
                            console.log(error);
                            $vue.Dialog.addDialog = false;
                        });
                    }
                });
            },
            cancelAddForm: function () {
                this.Dialog.addDialog = false;
            },
            submitEditForm: function () {
                this.$refs.EditForm.validate(function (success, validateobj) {
                    if (success) {
                        $vue.Loading.bodyLoading = true;
                        axios.post("EditRole", $vue.EditFormData).then(function (response) {
                            $vue.Loading.bodyLoading = false;
                            if (response.data.success) {
                                $vue.$message({
                                    type: 'success',
                                    message: '修改成功'
                                });
                                getList();
                            }
                            else {
                                $vue.$message({
                                    type: 'success',
                                    message: '修改失败'
                                });
                            }
                            $vue.Dialog.editDialog = false;

                        }).catch(function (error) {
                            $vue.Loading.bodyLoading = false;
                            $vue.$message({
                                type: 'error',
                                message: '服务器异常'
                            });
                            console.log(error);
                            $vue.Dialog.editDialog = false;

                        });
                    }
                });
            },
            cancelEditForm: function () {
                this.Dialog.editDialog = false;
            },
            deleteClick: function () {
                this.$confirm('是否确认删除这' + this.$refs.dataTable.selection.length + '行数据', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(function () {
                    $vue.Loading.bodyLoading = true;
                    axios.post("DeleteRole", $vue.$refs.dataTable.selection).then(function (response) {
                        $vue.Loading.bodyLoading = false;
                        if (response.data.success) {
                            $vue.$message({
                                type: 'success',
                                message: '删除成功!'
                            });
                            getList();
                        } else {
                            $vue.$message({
                                type: 'info',
                                message: '删除失败!'
                            });
                        }
                    }).catch(function (error) {
                        $vue.Loading.bodyLoading = false;
                        $vue.$message({
                            type: 'error',
                            message: '服务器出错!'
                        });
                        console.log(error);
                    });

                }).catch(function () {
                    $vue.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            selectChange: function (selectValue) {
                if (this.$refs.dataTable.selection.length == 0) {
                    this.ButtonState.btnEdit = true;
                    this.ButtonState.btnDelete = true;
                }
                else if (this.$refs.dataTable.selection.length == 1) {
                    this.ButtonState.btnEdit = false;
                    this.ButtonState.btnDelete = false;
                }
                else {
                    this.ButtonState.btnEdit = true;
                    this.ButtonState.btnDelete = false;
                }
            },
            rowClick: function (row, event, column) {
                this.$refs.dataTable.toggleRowSelection(row);
            },
            handleSizeChange: function (val) {
                if (this.QueryFormData.Page > (this.PaginationData.total / val + 1)) {
                    return;
                }
                this.PaginationFilter.Page = this.QueryFormData.Page;
                this.PaginationFilter.PageSize = val;
                getList(this.PaginationFilter);
            },
            handleCurrentChange: function (val) {
                this.PaginationFilter.Page = val;
                this.PaginationFilter.PageSize = this.QueryFormData.PageSize;
                getList(this.PaginationFilter);
            },
            closeAddDialog: function (done) {
                done();
            }
        }

    });

    function getList(filter) {
        if (filter == null) {
            filter = $vue.QueryFormData;
        }
        $vue.$refs.dataTable.clearSelection();
        $vue.ButtonState.btnEdit = true;
        $vue.ButtonState.btnDelete = true;
        $vue.Loading.tableLoading = true;
        axios.post("GetRoleList", filter).then(function (response) {
            $vue.Loading.tableLoading = false;
            $vue.tableData = response.data.List;
            $vue.PaginationData.total = response.data.Total;
        }).catch(function (error) {
            $vue.Loading.tableLoading = false;
            $vue.tableData = [];
            $vue.PaginationData.total = 0;
            $vue.$message({
                type: 'error',
                message: '服务器出错'
            });
        });
    }


    window.onresize = function () {
        $vue.tableHeight = $vue.$refs.App.getBoundingClientRect().height -
            $vue.$refs.QueryFormDiv.getBoundingClientRect().height -
            $vue.$refs.Pagination.getBoundingClientRect().height - 20;
    }
    window.onresize();
    getList();
    GetActionAuthorize($vue);
</script>
